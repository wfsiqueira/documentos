Date: Tue, 4 Aug 2020 20:08:45 +0000 (UTC)
Message-ID: <1844084851.111.1596571725820@6f36c4f94bb4>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_110_166337397.1596571725820"

------=_Part_110_166337397.1596571725820
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Tutorial: como criar um teste Datadriven no Postman com BDD</tit=
le>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Tutorial: como criar um teste Datadriven no Postman com BDD</h1>
    <div class=3D"Section1">
        <p>O teste datadriven no Postman pode ser uma m=C3=A3o na roda para=
 a sua =C3=A1rea que precisa executar o <strong>mesmo fluxo</strong> com <s=
trong>par=C3=A2metros diferentes</strong>.</p>
<p>Este tutorial =C3=A9 baseado em <a href=3D"https://www.getpostman.com/do=
cs/postman/collection_runs/working_with_data_files" class=3D"external-link"=
 rel=3D"nofollow">tutorial</a> do pr=C3=B3prio Postman mas trazendo para a =
nossa realidade.</p>
<p>Os exemplos utilizados a seguir s=C3=A3o do m=C3=B3dulo <strong>Payments=
</strong>, mas voc=C3=AA pode adapt=C3=A1-lo.</p>
<h2 id=3D"Tutorial:comocriarumtesteDatadrivennoPostmancomBDD-CriandoumaColl=
ectiondatadriven">Criando uma Collection datadriven</h2>
<p>Em uma collection datadriven, cada cen=C3=A1rio representa uma etapa do =
fluxo do seu m=C3=B3dulo. No payments, este =C3=A9 o fluxo:</p>
<ol>
<li>Criar um customer</li>
<li>Adicionar uma account cash</li>
<li>Adicionar um credit card</li>
<li>Criar um pagamento</li>
<li>Checar se foi criado corretamente</li>
<li>Confirmar um pagamento</li>
<li>Estornar um pagamento</li>
<li>Cancelar um pagamento</li>
</ol>
<p>Ent=C3=A3o, sua collection ter=C3=A1 apenas estes 8 cen=C3=A1rios que ir=
=C3=A3o se moldar dinamicamente de acordo com os par=C3=A2metros passados n=
o seu arquivo <strong>csv</strong>.</p>
<h2 id=3D"Tutorial:comocriarumtesteDatadrivennoPostmancomBDD-Criandooarquiv=
odata.csv">Criando o arquivo data.csv</h2>
<p>Voc=C3=AA pode chamar como quiser, neste caso, chamei de payments.csv.&n=
bsp;</p>
<p><span style=3D"color: rgb(255,0,0);"><strong>Importante:</strong></span>=
 Se voc=C3=AA criar um novo arquivo no WPS Spreadsheets ou Excel e salv=C3=
=A1-lo, ao abrir ele no Notepad++ voc=C3=AA perceber=C3=A1 que ele =C3=A9 s=
eparado por ponto e v=C3=ADrgula ";". O Postman aceita apenas separado por =
v=C3=ADrgula. Neste caso, aperte Ctrl+H no Notepad++ e substitua todos os p=
onto e v=C3=ADrgula por v=C3=ADrgula.</p>
<p>Cada coluna deste data.csv deve ser um par=C3=A2metro que voc=C3=AA dese=
ja mudar no payload ou uma a=C3=A7=C3=A3o que voc=C3=AA deseja tomar (para =
pular cen=C3=A1rios em caso de falha, por exemplo). No caso de <strong>paym=
ents</strong>, as colunas s=C3=A3o:</p>
<ul>
<li>intent: indica a inten=C3=A7=C3=A3o do pagamento que pode ser CAPTURE o=
u AUTHORIZE</li>
<li>method: indica o m=C3=A9todo de pagamento que pode ser ACCOUNT_CASH ou =
CREDIT_CARD</li>
<li>cvv: o c=C3=B3digo de seguran=C3=A7a do cart=C3=A3o (que n=C3=A3o =C3=
=A9 preenchido, por exemplo, quando =C3=A9 ACCOUNT_CASH)</li>
<li>amount: o valor total do pagamento</li>
<li>async: true ou false para indicar se o pagamento =C3=A9 ass=C3=ADncrono=
 ou n=C3=A3o</li>
<li>confirmPayment: true ou false para indicar se eu tenho inten=C3=A7=C3=
=A3o de confirmar o pagamento naquele cen=C3=A1rio. Exemplo: Se a cria=C3=
=A7=C3=A3o do pagamento falhou, n=C3=A3o sentido confirmar este pagamento q=
ue n=C3=A3o existe.</li>
<li>confirmCode: o c=C3=B3digo de resposta que eu espero caso tenha sido co=
nfirmado o pagamento.</li>
</ul>
<p>E assim por diante...</p>
<h2 id=3D"Tutorial:comocriarumtesteDatadrivennoPostmancomBDD-Deixandooscen=
=C3=A1riosdin=C3=A2micos">Deixando os cen=C3=A1rios din=C3=A2micos</h2>
<p>Agora que voc=C3=AA populou um CSV cheio de par=C3=A2metros, est=C3=A1 n=
a hora de deixar os cen=C3=A1rios est=C3=A1ticos que voc=C3=AA criou no pri=
meiro passo em cen=C3=A1rios din=C3=A2micos.</p>
<p>Na aba Pre Request Script do cen=C3=A1rio, voc=C3=AA pode fazer uma prog=
rama=C3=A7=C3=A3o javascript para tornar este cen=C3=A1rio din=C3=A2mico.</=
p>
<p>Vamos come=C3=A7ar pelo mais dif=C3=ADcil: como alterar o payload de pag=
amento de acordo com os par=C3=A2metros que eu preenchi em determinada linh=
a do meu arquivo csv?</p>
<ul>
<li>Pegue um payload v=C3=A1lido, o mais completo que voc=C3=AA tiver.</li>
<li>Crie uma vari=C3=A1vel local ou global (vou chamar de <strong>paymentPa=
yloadBase</strong>) e no valor dela, cole este payload completo.</li>
<li>No javascript, acesse o valor da coluna usando "<strong>data.nome-da-co=
luna</strong>". Exemplo: <strong>data.intent</strong> para pegar o <strong>=
intent</strong> daquela linha. O nome deve ser EXATAMENTE igual ao nome que=
 voc=C3=AA deu para aquela coluna.</li>
<li>Jogue o valor do JSON do paymentPayloadBase em uma vari=C3=A1vel no jav=
ascript. Exemplo:&nbsp;<code>var paymentPayload =3D JSON.parse(postman.getE=
nvironmentVariable("paymentPayloadBase"));</code></li>
<li>Altere o payload com o valor do seu datadriven. Exemplo:&nbsp;<code>pay=
mentPayload.intent =3D data.intent;</code></li>
<li>No final, crie uma vari=C3=A1vel nova para setar o payload modificado (=
vou chamar de <strong>paymentPayload</strong>). Exemplo:&nbsp;<code>postman=
.setEnvironmentVariable("paymentPayload", JSON.stringify(paymentPayload));<=
/code></li>
<li>Pronto! Seu payload est=C3=A1 din=C3=A2mico.</li>
<li>Para chamar o payload din=C3=A2mico na aba "Body", basta inserir&nbsp;<=
code>{{paymentPayload}}</code></li>
</ul>
<p>Exemplo real:</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Exemplo real de payments</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: js; gutter: false; theme: Confluence" data-theme=3D"Confluence">// pega o=
 payload base
var paymentPayload =3D JSON.parse(postman.getEnvironmentVariable("paymentPa=
yloadBase"));

// altera o intent que pode ser CAPTURE ou AUTHORIZE
paymentPayload.intent =3D data.intent;
const type =3D data.type;
const method =3D data.method;
// Se o type for SINGLE
if (type =3D=3D=3D "SINGLE") {
    if (method =3D=3D=3D "CREDIT_CARD") {
        // e =C3=A9 um single de credit card, ent=C3=A3o remove o segundo m=
eio de pagament (account cash)
        paymentPayload.payments =3D paymentPayload.payments.splice(0,1);
    } else if (method =3D=3D=3D "ACCOUNT_CASH") {
        // se =C3=A9 single de wallet, ent=C3=A3o tira o primeiro meio de p=
agamento (credit card)
        paymentPayload.payments =3D paymentPayload.payments.splice(1,1);
    }
    // seta o valor do amount TOTAL dentro do meio de pagamento
    paymentPayload.payments[0].price.amount =3D Number(data.amount);
} else if (type =3D=3D=3D "SPLIT") {
    // se for SPLIT, o valor total dever=C3=A1 ser divido entre os dois
    paymentPayload.payments[0].price.amount =3D Number(data.amount)/2;
    paymentPayload.payments[1].price.amount =3D Number(data.amount)/2;
}
paymentPayload.payments[0].method =3D method;
if (method =3D=3D=3D "CREDIT_CARD") {
    // se o meio de pagamento principal =C3=A9 cart=C3=A3o, preenche os dad=
os de cvv, deviceInfo, etc
    paymentPayload.payments[0].methodId =3D postman.getEnvironmentVariable(=
"creditCardId");
    const cvv =3D data.cvv;
    if (cvv =3D=3D=3D null) {
        delete paymentPayload.payments[0].securityCode;
    } else {
        paymentPayload.payments[0].securityCode =3D data.cvv;
    }
    paymentPayload.payments[0].customFields.login =3D data.login;
    paymentPayload.payments[0].customFields.senha =3D data.senha;
    paymentPayload.payments[0].customFields.password =3D data.senha;
    const subscription =3D (data.subscription =3D=3D=3D "TRUE");
    if (!subscription) {
        delete paymentPayload.payments[0].customFields.subscriptionId;
    }
} else if (method =3D=3D=3D "ACCOUNT_CASH") {
    // se for account cash apenas coloca o ID no methodId
    paymentPayload.payments[0].methodId =3D postman.getEnvironmentVariable(=
"walletAccountCashId");
    delete paymentPayload.payments[0].securityCode;
}
//GENERATE gera um novo externalId
paymentPayload.transaction.externalId =3D data.externalId =3D=3D=3D "GENERA=
TE" ? "{{todayId}}" : data.externalId;

// coloca o valor do item que pode ser diferente do valor total (gera erro)
paymentPayload.transaction.items[0].price.amount =3D Number(data.amount);

// popula o hash do fingerPrint ou remove ele caso n=C3=A3o tenha sido info=
rmado (gera erro)
const fingerPrint =3D data.fingerprint;
if (fingerPrint =3D=3D=3D null) {
    paymentPayload.customFields.fingerprint;
} else {
    paymentPayload.customFields.fingerprint =3D data.fingerprint;
}

// informa se o pagamento =C3=A9 s=C3=ADncrono ou ass=C3=ADncrono
const _async =3D (data.async =3D=3D "TRUE");
paymentPayload.async =3D  _async;=20

// joga o payload modificado para a vari=C3=A1vel paymentPayload
postman.setEnvironmentVariable("paymentPayload", JSON.stringify(paymentPayl=
oad));</pre>=20
</div>
</div>
<h2 id=3D"Tutorial:comocriarumtesteDatadrivennoPostmancomBDD-Alterandooflux=
ocompostman.setNextRequest()">Alterando o fluxo com postman.setNextRequest(=
)</h2>
<p>Como foi mencionado anteriormente, em alguns cen=C3=A1rios n=C3=A3o faz =
sentido confirmar ou estornar o pagamento caso tenha dado falha na cria=C3=
=A7=C3=A3o. Neste caso, voc=C3=AA pode utilizar o postman.setNextRequest("N=
ome do cen=C3=A1rio") para pular a execu=C3=A7=C3=A3o para este cen=C3=A1ri=
o ou postman.setNextRequest(null) para encerrar a execu=C3=A7=C3=A3o daquel=
a linha e ir para a pr=C3=B3xima.</p>
<p>O postman.setNextRequest deve ser executado na <strong>aba Tests</strong=
> j=C3=A1 que deve ser executado DEPOIS que o request principal foi feito.<=
/p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Exemplo de setNextRequest</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: js; gutter: false; theme: Confluence" data-theme=3D"Confluence">// EXEMPL=
O 01:

if (responseCode.code =3D=3D=3D 201) {
    // se o customer foi criado com sucesso, popula o customerId
    var jsonData =3D pm.response.json();
    postman.setEnvironmentVariable("customerId", jsonData.id);
} else {
    // se ele j=C3=A1 existe, ent=C3=A3o j=C3=A1 tem cart=C3=A3o e account =
cash. Pode pular para a cria=C3=A7=C3=A3o do pagamento
    postman.setNextRequest("Create payment");
}

// EXEMPLO 02:

if (responseCode.code =3D=3D=3D 202) {
    // se deu certo o pagamento, ent=C3=A3o guarda o paymentId e vai para o=
 pr=C3=B3ximo cen=C3=A1rio
    var jsonData =3D JSON.parse(responseBody);
    postman.setEnvironmentVariable("paymentId", jsonData.paymentId);
    postman.setNextRequest("Check payment");
} else {
    // se n=C3=A3o gerou pagamento, n=C3=A3o pode executar os pr=C3=B3ximos=
 cen=C3=A1rios
    postman.setNextRequest(null);
}

EXEMPLO 03:

const confirmPayment =3D (data.confirmPayment =3D=3D=3D "TRUE")
const reversePayment =3D (data.reversePayment =3D=3D=3D "TRUE")
const cancelPayment =3D (data.cancelPayment =3D=3D=3D "TRUE")
if (confirmPayment) {
    // se confirmPayment =C3=A9 true, ent=C3=A3o vai para o cen=C3=A1rio de=
 confirma=C3=A7=C3=A3o
    postman.setNextRequest("Confirm payment");
} else if (reversePayment) {
    // se n=C3=A3o =C3=A9 pra confirmar mas =C3=A9 para estornar, vai para =
o cen=C3=A1rio de estorno
    postman.setNextRequest("Reverse payment");
} else if (cancelPayment) {
    // se n=C3=A3o =C3=A9 pra confirmar nem estornar, s=C3=B3 cancelar, ent=
=C3=A3o vai para cancelamento
    postman.setNextRequest("Cancel payment");
} else {
    // se n=C3=A3o =C3=A9 pra fazer nenhum deles, encerra o fluxo.
    postman.setNextRequest(null);
}</pre>=20
</div>
</div>
<h2 id=3D"Tutorial:comocriarumtesteDatadrivennoPostmancomBDD-Criandoasserts=
din=C3=A2micoscomBDD">Criando asserts din=C3=A2micos com BDD</h2>
<p>Primeiramente, voc=C3=AA deve instalar o ChaiJS conforme explicado com m=
ais detalhes <a href=3D"https://documenter.getpostman.com/view/220187/postm=
an-bdd-examples/6Z3uY71" class=3D"external-link" rel=3D"nofollow">nesta</a>=
 documenta=C3=A7=C3=A3o.</p>
<p>Para instalar voc=C3=AA deve executar um GET na url abaixo e, na aba Tes=
ts, colocar a resposta do conte=C3=BAdo dentro de uma vari=C3=A1vel global.=
</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: java; gutter: false; theme: Confluence" data-theme=3D"Confluence">GET htt=
p://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js

// Na aba Tests:
// "install" Postman BDD
postman.setGlobalVariable('postmanBDD', responseBody);</pre>=20
</div>
</div>
<p><br></p>
<p>Ap=C3=B3s instalado, voc=C3=AA pode fazer seus asserts din=C3=A2micos, b=
asta pegar o valor que vem do CSV e concaten=C3=A1-lo na sua aba Tests.&nbs=
p;</p>
<p>Apenas lembrando que antes voc=C3=AA deve executar um&nbsp;<code>eval(gl=
obals.postmanBDD);</code> para que o postman possa interpretar seu BDD.</p>
<div class=3D"code panel pdl" style=3D"border-width: 1px;">
<div class=3D"codeHeader panelHeader pdl" style=3D"border-bottom-width: 1px=
;">
<b>Criando testes din=C3=A2micos</b>
</div>
<div class=3D"codeContent panelContent pdl">=20
<pre class=3D"syntaxhighlighter-pre" data-syntaxhighlighter-params=3D"brush=
: js; gutter: false; theme: Confluence" data-theme=3D"Confluence">// pega o=
 c=C3=B3digo de resposta esperado l=C3=A1 no csv
const creationCode =3D Number(data.creationCode);

// pega os par=C3=A2metros para montar o texto do describe
var s1 =3D data.intent + " a " + data.type + " " + data.method + " payment =
";
var s2 =3D data.cvv !=3D=3D null ? "with cvv " : "without cvv ";
var s3 =3D data.async =3D=3D=3D "TRUE" ? "and async true " : "and async fal=
se ";
var s4 =3D data.discountType !=3D=3D null ? "with discount " : "without dis=
count ";

var describeText =3D s1.concat(s2).concat(s3).concat(s4);

// Load Postman BDD
eval(globals.postmanBDD);

describe(describeText, function() {
    it('should return a status code ' + creationCode, function() {
        response.should.have.status(creationCode);
        response.should.be.json;
        response.body.should.not.be.empty;
    });
    if (creationCode =3D=3D=3D 202) {
        it('should return a valid paymentId', function() {
            response.body.should.have.property('paymentId').and.not.empty;
        });
    } else {
        it('should NOT return the paymentId', function() {
            response.body.should.not.have.property('paymentId');
        });
    }
});</pre>=20
</div>
</div>
<p class=3D"auto-cursor-target">O resultado ser=C3=A1 esse:</p>
<p class=3D"auto-cursor-target"><span class=3D"confluence-embedded-file-wra=
pper"><img class=3D"confluence-embedded-image confluence-external-resource"=
 src=3D"https://preview.ibb.co/kMiiTS/Screenshot_1.png" data-image-src=3D"h=
ttps://preview.ibb.co/kMiiTS/Screenshot_1.png"></span></p>
<h2 class=3D"auto-cursor-target" id=3D"Tutorial:comocriarumtesteDatadrivenn=
oPostmancomBDD-ExecutandodatadrivennoCollectionRunnerdoPostman">Executando =
datadriven no Collection Runner do Postman</h2>
<p>No Collection Runner do postman, existe um bot=C3=A3o chamado "Select Fi=
le" no campo Data. Selecione o seu data.csv criado para o datadriven. O nom=
e deve aparecer do lado.</p>
<p><span class=3D"confluence-embedded-file-wrapper"><img class=3D"confluenc=
e-embedded-image confluence-external-resource" src=3D"https://s3.amazonaws.=
com/postman-static-getpostman-com/postman-docs/58702694.png" data-image-src=
=3D"https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/587=
02694.png"></span></p>
<p>Clique em "Preview" para ver se os dados foram carregados corretamente. =
Se eles vierem "amontoados", =C3=A9 porque voc=C3=AA esqueceu de separar el=
es por v=C3=ADrgula (o padr=C3=A3o do Excel e WPS =C3=A9 ponto e v=C3=ADrgu=
la). Os dados dever=C3=A3o aparecer separadamente desta forma:</p>
<p><span class=3D"confluence-embedded-file-wrapper confluence-embedded-manu=
al-size"><img class=3D"confluence-embedded-image confluence-external-resour=
ce" width=3D"800" src=3D"http://blog.getpostman.com/wp-content/uploads/2016=
/06/Screen-Shot-2016-06-25-at-15.10.55.png?x38712" data-image-src=3D"http:/=
/blog.getpostman.com/wp-content/uploads/2016/06/Screen-Shot-2016-06-25-at-1=
5.10.55.png?x38712"></span></p>
<p>Pronto! Agora basta selecionar seu environment e rodar.</p>
<h2 id=3D"Tutorial:comocriarumtesteDatadrivennoPostmancomBDD-VantagenseDesv=
antagensdoDatadriven">Vantagens e Desvantagens do Datadriven</h2>
<p>Vantagens:</p>
<ul>
<li>Para criar um novo fluxo, basta adicionar uma linha no CSV, n=C3=A3o =
=C3=A9 necess=C3=A1rio criar um request novo no postman</li>
<li>Todos os fluxos est=C3=A3o bem na sua frente, listados em uma planilha.=
 Fica mais f=C3=A1cil de visualizar qual combina=C3=A7=C3=A3o de par=C3=A2m=
etro est=C3=A1 faltando para criar um fluxo novo</li>
<li>Menos tempo de manuten=C3=A7=C3=A3o e cria=C3=A7=C3=A3o de cen=C3=A1rio=
s depois que o fluxo din=C3=A2mico est=C3=A1 pronto</li>
</ul>
<p>Desvantagens:</p>
<ul>
<li>Requer um conhecimento um pouco mais avan=C3=A7ado do QA em javascript =
para tornar os cen=C3=A1rios din=C3=A2micos</li>
<li>Montar o fluxo inicial =C3=A9 mais trabalhoso do que apenas copiar os r=
equests est=C3=A1ticos como fazemos hoje.</li>
<li>Requer mais aten=C3=A7=C3=A3o por parte do QA na hora de tornar din=C3=
=A2mico, j=C3=A1 que ele deve prever os mais variados valores que vem do cs=
v.</li>
</ul>
    </div>
</body>
</html>
------=_Part_110_166337397.1596571725820--
