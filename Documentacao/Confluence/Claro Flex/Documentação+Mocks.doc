Date: Tue, 4 Aug 2020 18:45:58 +0000 (UTC)
Message-ID: <1537646397.13.1596566758348@15d48fbc96ea>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_12_918743321.1596566758348"

------=_Part_12_918743321.1596566758348
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Documenta=C3=A7=C3=A3o Mocks</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Documenta=C3=A7=C3=A3o Mocks</h1>
    <div class=3D"Section1">
        <p>Documenta=C3=A7=C3=A3o para uso do servidor de mocks.</p>
<p>* * *</p>
<p># =C3=8Dndice</p>
<p>* [Servidor de mocks](#servidor-de-mocks)<br> * [Cria=C3=A7=C3=A3o de mo=
cks](#cria=C3=A7=C3=A3o-de-mocks)<br> * [Implanta=C3=A7=C3=A3o de mocks](#i=
mplanta=C3=A7=C3=A3o-de-mocks)<br> <br>* * *</p>
<p># Servidor de mocks</p>
<p>Teremos uma m=C3=A1quina dedicada para mocks para ser usada caso aconte=
=C3=A7a indisponibilidade de servi=C3=A7os ou para falta de massas de dados=
.</p>
<p>## Cria=C3=A7=C3=A3o de mocks</p>
<p>* Baixar o SoapUI em <a href=3D"https://www.soapui.org/downloads/soapui.=
html" class=3D"external-link" rel=3D"nofollow">https://www.soapui.org/downl=
oads/soapui.html</a><br> * Criar o projeto clicando em *File* -&gt; *New SO=
AP Project*<br> * Importar o WSDL clicando com o bot=C3=A3o direito sobre o=
 projeto e em seguida clicar em *Add WSDL*<br> * Adicionar o arquivo .WSDL =
ou o endere=C3=A7o para importa=C3=A7=C3=A3o<br> * Com a importa=C3=A7=C3=
=A3o finalizada com sucesso, criar o mockService clicando com o bot=C3=A3o =
direito sobre o projeto e em seguida clicando em *New SOAP MockService*<br>=
 * Criar mockOperation clicando com o bot=C3=A3o direito sobre o mockServic=
e, em seguida clicando em *New MockOperation* e por fim escolher a opera=C3=
=A7=C3=A3o desejada<br> * Ao criar o mockOperation =C3=A9 criado automatica=
mente um response, que deve ser configurado conforme a necessidade do mock<=
br> * Para criar um novo response =C3=A9 preciso clicar com o bot=C3=A3o di=
reito sobre o mockOperation e em seguida clicar em *New MockResponse*<br> *=
 Com todos os casos de mocks criados temos que configurar as condi=C3=A7=C3=
=B5es para cada um deles, para isso temos que clicar duas vezes sobre o moc=
kOperation<br> * Em *Dispatch:* escolher *QUERY_MATCH*<br> * Em *Default Re=
sponse:* escolher o response desejado<br> * Para cada response temos que ad=
icionar uma cl=C3=A1usula de match clicando no bot=C3=A3o *Add a new Match*=
<br> * Para cada match configurar o *XPath:* para extrair o dado e fazer a =
condi=C3=A7=C3=A3o, segue um exemplo:<br> ```<br> stoc:tickerSymbol/text()<=
br> ```<br> * Para cada match configurar o resultado esperado em *Expected =
Value:* para usar determinado mock, segue um exemplo:<br> ```<br> 'petr4'<b=
r> ```<br> * Para cada match escolher o mock que ser=C3=A1 retornado em *Di=
spatch to:*<br> * Ap=C3=B3s todos os matches configurados =C3=A9 preciso te=
star se cada uma das condi=C3=A7=C3=B5es de entrada est=C3=A3o retornando o=
s mocks desejados para isso temos que subir o servidor de mocks do SoapUI. =
Para isso =C3=A9 s=C3=B3 clicar duas vezes sobre o mockService e depois cli=
car em *Starts this MockService on the specified port and endpoint*. No cas=
o de subida com sucesso o SoapUI mostrar=C3=A1 a mensagem *running on port =
XPTO*<br> * =C3=89 preciso testar cada caso configurado nos matches e verif=
icar o payload de retorno se =C3=A9 o mock desejado<br> * Ap=C3=B3s esses t=
estes o projeto de mock est=C3=A1 pronto e pode ser salvo no reposit=C3=B3r=
io git do projeto na pasta *claro-realwave-extensions/stubs/soap/projects*<=
/p>
<p>## Implanta=C3=A7=C3=A3o de mocks</p>
<p>* Criar uma c=C3=B3pia do arquivo *claro-realwave-extensions/stubs/soap/=
deploy-mocks.sh.sample* retirando o .sample, criando o arquivo como por exe=
mplo *claro-realwave-extensions/stubs/soap/deploy-mocks.sh*<br> * Configura=
r o novo arquivo criado de acordo com as configura=C3=A7=C3=B5es da m=C3=A1=
quina de cada desenvolvedor. Configurar as seguintes vari=C3=A1veis:<br> ``=
`<br>SOAPUI_PATH=3D/Applications/SoapUI-5.0.0.app/Contents/java/app<br>PROJ=
ECT_PATH=3D~/Dev/Zup_Projects/claro-realwave-extensions<br>TMP_PATH=3D$PROJ=
ECT_PATH/stubs/soap/wars<br>```<br>* Confirar os dados da m=C3=A1quina do s=
ervidor de mocks. Os dados da m=C3=A1quina que estamos usando atualmente s=
=C3=A3o:<br>```<br>USER=3Dzup<br>MACHINE_NAME=3D<a href=3D"http://vivo-next=
-mocks001.aws.zup.com.br" class=3D"external-link" rel=3D"nofollow">vivo-nex=
t-mocks001.aws.zup.com.br</a><br>```<br>* Para cada projeto do SoapUI temos=
 que adicionar as vari=C3=A1veis e comandos a seguir:<br>```<br># Cria=C3=
=A7=C3=A3o do artefato do projeto X<br>X_TMP_PATH=3D$TMP_PATH<br>X_WAR=3D$X=
_TMP_PATH/x.war<br>X_MOCK_PATH=3D$PROJECT_PATH/stubs/soap/projects/X-mock.x=
ml<br>$SOAPUI_PATH/bin/wargenerator.sh -w true -s ~/soapui-settings.xml -e =
http://$MACHINE_NAME/x -d $X_TMP_PATH -f $X_WAR $X_MOCK_PATH<br>scp $X_WAR =
$USER@$<a href=3D"http://MACHINE_NAME/opt/zup/jetty/webapps" class=3D"exter=
nal-link" rel=3D"nofollow">MACHINE_NAME:/opt/zup/jetty/webapps</a><br>```<b=
r>* A senha para acessar a m=C3=A1quina =C3=A9: zup@2017<br>* Executar o ar=
quivo verificando se foram criados todos os arquivos .war desejados e impla=
ntados com sucesso</p>
    </div>
</body>
</html>
------=_Part_12_918743321.1596566758348--
